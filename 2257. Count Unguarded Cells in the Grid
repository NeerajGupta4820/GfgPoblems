class Solution {
public:
    vector<pair<int, int>> dir = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
    void isguarded(int i, int j, vector<vector<int>>& grid, int m, int n) {
        for (auto [dx, dy] : dir) { 
            int x = i + dx, y = j + dy;
            while (x >= 0 && x < m && y >= 0 && y < n) { 
                if (grid[x][y] == 2 || grid[x][y] == 3) break;
                grid[x][y] = 1; 
                x += dx; 
                y += dy;
            }
        }
    }

    int countUnguarded(int m, int n, vector<vector<int>>& guards, vector<vector<int>>& walls) {
        vector<vector<int>> grid(m, vector<int>(n, 0)); // 0: not guarded, 1: guarded, 2: wall, 3: guard

        for (auto& wall : walls) {
            int x = wall[0], y = wall[1];
            grid[x][y] = 2;
        }
        for (auto& guard : guards) {
            int x = guard[0], y = guard[1];
            grid[x][y] = 3;
        }
        for (auto& guard : guards) {
            int x = guard[0], y = guard[1];
            isguarded(x, y, grid, m, n);
        }

        int unguardedCount = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) unguardedCount++;
            }
        }

        return unguardedCount;
    }
};
